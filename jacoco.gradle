/**
 * Copyright 2020 Krystian Viel Asis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'jacoco'

jacoco {
    // Check for the latest version here https://www.eclemma.org/jacoco/
    toolVersion = "0.8.5"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

// afterEvaluate because we have no idea of the android plugin
project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTask = project.tasks.getByName("test${variantName.capitalize()}UnitTest")

        // So the task name will be the usual test task with just a suffix
        def coverageTask = tasks.register("${testTask.name}Coverage", JacocoReport) {
            group = "Reporting"
            description = "Generate JaCoCo reports on this variant"

            reports {
                html.enabled = true
                xml.enabled = true
                html.destination file("${project.buildDir}/jacoco/html/$variantName")
                xml.destination file("${project.buildDir}/jacoco/${variantName}_jacoco.xml")
                // we don't need csv
            }

            def excludes = [
                // Databinding
                'android/databinding/**/*.class',
                '**/android/databinding/*Binding.class',
                '**/BR.*',
                '**/databinding/*',
                '**/*DataBinderMapperImpl.class',
                '**/*DataBindingInfo.class',
                '**/*BindingImpl.class',
                // Glide
                '**/*GeneratedAppGlideModuleImpl.class',
                '**/*GeneratedRequestManagerFactory.class',
                '**/*GeneratedRequestManagerFactory.class',
                // Usual Android
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Fragment*.class',
                '**/*Activity*.class',
                '**/*Service*.class',
                '**/*Receiver*.class',
                // Dagger
                '**/*_MembersInjector.class',
                '**/Dagger*Component.class',
                '**/Dagger*Component$Builder.class',
                '**/*Module_*Factory.class'
            ]

            def javaClasses = fileTree(
                dir: variant.javaCompiler.destinationDir,
                excludes: excludes
            )
            def kotlinClasses = fileTree(
                dir: "${buildDir}/tmp/kotlin-classes/${variantName}",
                excludes: excludes
            )

            classDirectories.setFrom(
                files([javaClasses, kotlinClasses])
            )

            sourceDirectories.setFrom(
                files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
                ])
            )

            executionData.setFrom(
                files("${project.buildDir}/jacoco/${testTask.name}.exec")
            )
        }

        testTask.finalizedBy coverageTask
    }
}